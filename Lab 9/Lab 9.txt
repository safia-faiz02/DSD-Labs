module two_digit_display( input clk, reset, 
input [3:0] sw1,sw2, 
output reg [3:0] led1,led2, 
output reg [7:0] SSEG_CA,SSEG_AN);

reg [3:0] SW;

wire [17:0] count_out;
counter C1(clk,reset, count_out);

always@(posedge clk)
begin
case(count_out[17])
1'b0:
begin
SSEG_AN<=8'b11111110;
SW<=sw1;
end

1'b1:
begin
SSEG_AN<=8'b11111101;
SW<=sw2;
end
endcase

led1<=sw1;
led2<=sw2;

case (SW)            
 4'b0000: SSEG_CA <= 8'b11000000;            
 4'b0001: SSEG_CA <= 8'b11111001;            
 4'b0010: SSEG_CA <= 8'b10100100;             
4'b0011: SSEG_CA <= 8'b10110000;             
4'b0100: SSEG_CA <= 8'b10011001;             
4'b0101: SSEG_CA <= 8'b10010010;            
 4'b0110: SSEG_CA <= 8'b10000010;             
4'b0111: SSEG_CA <= 8'b11011000;    
4'b1000: SSEG_CA <= 8'b10000000;    
4'b1001: SSEG_CA <= 8'b10011000;             
4'b1010: SSEG_CA <= 8'b10001000;              
4'b1011: SSEG_CA <= 8'b10000000;              
4'b1100: SSEG_CA <= 8'b11000110;              
4'b1101: SSEG_CA <= 8'b10100001;              
4'b1110: SSEG_CA <= 8'b10000110;              
4'b1111: SSEG_CA <= 8'b10001110;          
endcase 

end
endmodule

module counter(input clk,reset,output reg [17:0] count_out);


always@(posedge clk or posedge reset)
begin
if(reset)
count_out<=0;
else 
count_out<=count_out+1;
end

endmoodule


______________________________________________________________________________

